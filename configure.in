dnl : test fuer sys_errlist[]
dnl   test auf xstr, when nicht bauen
dnl
dnl Process this file with autoconf to produce a configure script.
AC_INIT(h/ap.h)
AC_CONFIG_HEADER(h/config.h)

dnl AC_INIT_VAR(mmdfdebug,1)
dnl AC_INIT_VAR(mmdfdlog,1)
dnl AC_INIT_VAR(mmdfdbglog,1)
dnl AC_INIT_VAR(mmdfleftdots,1)
dnl AC_INIT_VAR(mmdfcitation,1)
AC_INIT_VAR(mmdfnodomlit,1)
AC_INIT_VAR(mmdfstatsort,1)

AC_PREFIX_DEFAULT('/usr')

OUTPUT_FILES="lib/Makefile src/Makefile uip/Makefile"
OUTPUT_FILES=$OUTPUT_FILES" conf/common/Makefile.com Makefile"

VERSION=`sed -e 's/MMDF //' -e 's/\./ /' ${srcdir}/Version`
MMDF_MAJOR_VERSION=`echo $VERSION | awk '{print $1}'`
MMDF_MINOR_VERSION=`echo $VERSION | awk '{print $2}'`
MMDF_PATCH_LEVEL=`echo $VERSION | awk '{print $3}'`
VERSION_DATE=`echo $VERSION | awk '{print $4,$5}'`
echo "configuring for MMDF-$MMDF_MAJOR_VERSION.$MMDF_MINOR_VERSION \
Patchlevel $MMDF_PATCH_LEVEL ($VERSION_DATE)"
AC_SUBST(VERSION)dnl

dnl lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll
dnl lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll
dnl MMDF_MAJOR_VERSION=2
dnl MMDF_MINOR_VERSION=44
dnl MMDF_PATCH_LEVEL=9
dnl VERSION_DATE="September 1998"
MMDFLOGIN=mmdf
ROOTLOGIN=root
PGMPROT=755
MMDFLIBS="\${top_srcdir}/lib/libmmdf.a"
MMDF_TARGET=no
rcvdir="${libexecdir}"

dnl lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll
dnl lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll
dnl Version business -- should be the same as in Singular subdir 
dnl
AC_GET_UNAME
MMDF_CONFIG=$UNAME_NODE.config
AC_LOAD_LOCAL_CONFIG($MMDF_CONFIG)
AC_CANONICAL_HOST
AC_PROG_CC
AC_PROG_CPP
dnl AC_PROG_CXX

dnl check if conf/$target exists
if test "$target" = "NONE"; then
  target=$host
fi
AC_MSG_CHECKING(whether 'conf/$target' exists)
if test -x conf/$target; then
    AC_MSG_RESULT(good)
    MMDF_TARGET=yes
else
    AC_MSG_RESULT(no)
    AC_MSG_WARN("directory conf/$target doesn\'t exists.")
    AC_MSG_WARN(cannot finish configuration with 'sitesetup $target')
    if test "$create_target" = "yes"; then
      AC_CREATE_TARGET($target)
      MMDF_TARGET=yes
    else
      AC_MSG_WARN(Please run one of:)
      AC_MSG_WARN('configure --target=<existing target>')
      AC_MSG_WARN('configure --create-target')
      AC_MSG_ERROR(Cannot continue with configure until target exits)
    fi
fi

dnl lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll
dnl AC_TRY_MY_COMPILE(INCLUDES, FUNCTION-BODY,
dnl             [ACTION-IF-FOUND [, ACTION-IF-NOT-FOUND]])
AC_DEFUN(AC_TRY_MY_COMPILE,
[cat > conftest.$ac_ext <<EOF
dnl This sometimes fails to find confdefs.h, for some reason.
dnl [#]line __oline__ "[$]0"
[#]line __oline__ "configure"
#include "confdefs.h"
[$1]
int main() { return 0; }
int t() {
[$2]
; return 0; }
EOF
result=`eval $ac_compile 2>&1 `
if test "$result" = ""; then
  $3
else
  output=`echo $result |grep stdio.h`
  if test "$output" = ""; then
    $4
  else
    $3
  fi
fi
rm -f conftest*]
)
AC_PROVIDE(AC_TRY_MY_COMPILE)

dnl lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll
AC_DEFUN(AC_FIND_DEPEND,
[
  OLDCFLAGS=$CFLAGS
  WHAT_DEPEND="depend-M"
  AC_MSG_CHECKING(for $CC support -M)
  CFLAGS=$OLDCFLAGS" -M"
  AC_TRY_MY_COMPILE([#include <stdio.h>], ,
	 ac_cv_depend_flag=yes,ac_cv_depend_flag=no)
  if test "$ac_cv_depend_flag" = yes; then
     AC_MSG_RESULT(yes)
     DEPEND_FLAG="-M"
  else
     AC_MSG_RESULT(no)
     AC_MSG_CHECKING(for $CC support -Em)
     CFLAGS=$OLDCFLAGS" -Em"
     dnl AC_CACHE_VAL(ac_cv_returns_n_of_chars, 
     AC_TRY_MY_COMPILE([#include <stdio.h>],[int depend_flag],
	    ac_cv_depend_flag=yes,ac_cv_depend_flag=no)
     if test "$ac_cv_depend_flag" = yes; then
        AC_MSG_RESULT(yes)
        DEPEND_FLAG="-Em"
     else
        AC_MSG_RESULT(no)
        AC_MSG_CHECKING(for $CC support -E -H)
        CFLAGS=$OLDCFLAGS" -E -H"
        AC_TRY_MY_COMPILE([#include <stdio.h>], ,
	       ac_cv_depend_flag=yes,ac_cv_depend_flag=no)
        if test "$ac_cv_depend_flag" = yes; then
           AC_MSG_RESULT(yes)
           DEPEND_FLAG="-E -H"
        else
           AC_MSG_RESULT(no)
           AC_MSG_CHECKING(for $CC support -E)
           CFLAGS=$OLDCFLAGS" -E"
           AC_TRY_MY_COMPILE([#include <stdio.h>], ,
   	       ac_cv_depend_flag=yes,ac_cv_depend_flag=no)
           if test "$ac_cv_depend_flag" = yes; then
              AC_MSG_RESULT(yes)
              DEPEND_FLAG="-E"
           else
              AC_MSG_RESULT(no)
              DEPEND_FLAG=""
	      WHAT_DEPEND="depend-cat"
           fi
        fi
     fi
  fi
  CFLAGS=$OLDCFLAGS
])
AC_PROVIDE(AC_FIND_DEPEND)

dnl lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll
dnl lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll
dnl
dnl CHECK --without arguments
dnl
AC_ARG_ENABLE(nameserver, \
  [  --enable-PACKAGE        configure and build PACKAGE
     --disable-PACKAGE       do not configure and build PACKAGE
 where PACKAGE can be:
     nameserver           nameserver-code]                          \
 (enabled))
AC_ARG_ENABLE(dbm, \
  [     dbm                tables via dbm, sequential otherwise]     \
 (enabled))
AC_ARG_ENABLE(wrap, \
  [     wrap               tcpwrapper]                               \
 (enabled))
AC_ARG_ENABLE(nis, \
  [     nis                nis support for tables]                   \
(disabled))
AC_ARG_ENABLE(nn, \
  [     nn                 table mailids and users will be                \
                                 configurable in mmdftailor]               \
(disabled))
AC_ARG_ENABLE(nosrcroute, \
  [     nosrcroute         remove source-routing]                    \
 (enabled))
AC_ARG_ENABLE(8bit, \
  [     8bit               8bit clean]                               \
 (enabled))
AC_ARG_ENABLE(lock_files, \
  [     lock_files         use explicily lock-files for filelocking] \
(disabled))
AC_ARG_ENABLE(dial, \
  [     dial               dial code]                                \
(disabled))
AC_ARG_ENABLE(badusers, \
  [     badusers           badusers channel-program]                 \
 (enabled))
AC_ARG_ENABLE(bboards, \
  [     bboards            bboards channel-program]                  \
(disabled))
AC_ARG_ENABLE(blockaddr, \
  [     blockaddr          blockaddr channel-program]                \
(disabled))
AC_ARG_ENABLE(delay, \
  [     delay              delay channel-program]                    \
(disabled))
AC_ARG_ENABLE(ean, \
  [     ean                ean channel-program]                      \
(disabled))
AC_ARG_ENABLE(list, \
  [     list               list channel-program]                     \
 (enabled))
AC_ARG_ENABLE(niftp, \
  [     niftp              niftp channel-program]                    \
(disabled))
AC_ARG_ENABLE(phone, \
  [     phone              phone channel-program]                    \
(disabled))
AC_ARG_ENABLE(pobox, \
  [     pobox              pobox channel-program]                    \
(disabled))
AC_ARG_ENABLE(pop, \
  [     pop                pop channel-program]                      \
 (enabled))
AC_ARG_ENABLE(prog, \
  [     prog               prog channel-program]                     \
(disabled))
AC_ARG_ENABLE(smphone, \
  [     smphone            smphone channel-program]                  \
(disabled))
AC_ARG_ENABLE(smtp, \
  [     smtp               smtp channel-program]                     \
 (enabled))
AC_ARG_ENABLE(uucp, \
  [     uucp               uucp channel-program]                     \
 (enabled))
AC_ARG_ENABLE(msg, \
  [     msg                msg user agent]                           \
 (enabled))
AC_ARG_ENABLE(other, \
  [     other              malias,mlist,rcv*,resend,sendmail,v6mail] \
 (enabled))
AC_ARG_ENABLE(send, \
  [     send               send user agent]                          \
 (enabled))
AC_ARG_ENABLE(snd, \
  [     snd                snd user agent]                           \
 (enabled))
AC_ARG_ENABLE(ucbmail, \
  [     ucbmail            ucbmail 'Mail' program]                   \
 (enabled))
AC_ARG_ENABLE(unsupported, \
  [     unsupported        autores, cvmbox]                          \
(disabled))
AC_ARG_ENABLE(gcc, \
  [     gcc                use gcc as compiler]                      \
 (enabled))


dnl lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll
if test "$enable_gcc" = "no"; then
  ac_cv_prog_CC=cc
  ac_cv_prog_gcc=no
  GCC=
  CC=cc
  echo "using ${CC-cc}"
else
  AC_PATH_PROG(PATH_GCC, gcc)
fi
  echo $CFLAGS
dnl lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll
dnl lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll
dnl checking for architectures
AC_AIX
AC_MSG_CHECKING(whether _AIX is defined)
AC_CACHE_VAL(ac_cv_is_aix,
AC_EGREP_CPP(yes,
[#ifdef _AIX
    yes
#endif
], ac_cv_is_aix=yes, ac_cv_is_aix=no, 1))
if test "$ac_cv_is_aix" = yes; then
  AC_MSG_RESULT(yes)
else
  AC_MSG_RESULT(no)
fi

dnl AC_DYNIX_SEQ	AC_FUNC_GETMNTENT
dnl AC_IRIX_SUN	AC_FUNC_GETMNTENT, AC_CHECK_LIB(sun, getpwnam)
AC_ISC_POSIX
AC_MINIX	
dnl AC_SCO_INTL	AC_FUNC_STRFTIME
dnl AC_XENIX_DIR	AC_HEADER_DIRENT

AC_FIND_DEPEND
dnl lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll
dnl lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll
dnl those are needed to check for libs and headers, later on
dnl Checking for programs.
dnl
AC_PROG_AWK
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET
AC_PATH_PROG(AR, ar)
AC_CHECK_PROG(ASSIGN, assign, assign)
AC_PATH_PROG(XSTR, xstr)
AC_PATH_PROG(CTAGS, ctags)
if test "$ac_cv_prog_ASSIGN" != ""; then
    AC_DEFINE(HAVE_ASSIGN)
fi
AC_PATH_PROG(CHOWN, chown)
AC_CHECK_PROG(LORDER, lorder, lorder)
if test "$ac_cv_prog_LORDER" != ""; then
    LIBFIX="./libfix"
else
    LIBFIX="./libfix.linux"
fi
AC_PROG_RANLIB

dnl lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll
dnl Checking for files.
dnl
AC_CHECK_FILE(SECURETTY, /etc/securetty)
AC_CHECK_FILE(TSECURETTY, /etc/securetty-test)

dnl lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll
dnl Checking for libraries.
dnl
dnl and add to -I to CPPFLAGS and and -Lto LDFLAGS, just to be sure
if test "$libdir" = '${exec_prefix}/lib'; then
  if test "x$prefix" = xNONE; then
    if test "x$exec_prefix" = xNONE; then
      LDFLAGS="-L${exec_prefix}/lib ${LDFLAGS}"
      ac_configure_args="$ac_configure_args --libdir=${exec_prefix}/lib"
    else
      LDFLAGS="-L${ac_default_prefix}/lib ${LDFLAGS}"
      ac_configure_args="$ac_configure_args --libdir=${ac_default_prefix}/lib"
    fi
  else
    LDFLAGS="-L${prefix}/lib ${LDFLAGS}"
    ac_configure_args="$ac_configure_args --libdir=${prefix}/lib"
  fi
else
  if test "x$libdir" != xNONE/lib; then
    LDFLAGS="-L${libdir} ${LDFLAGS}"
  fi
fi

echo $PATH_GCC
echo "==>${CFLAGS}"
echo "==>${CPPFLAGS}"
if test "$includedir" = '${prefix}/include'; then
  if test "x$prefix" != xNONE; then
    CPPFLAGS="-I${prefix}/include ${CPPFLAGS}"
    CFLAGS="-I${prefix}/include ${CFLAGS}"
    ac_configure_args="$ac_configure_args --includedir=${prefix}/include"
dnl  else
dnl    CPPFLAGS="-I${ac_default_prefix}/include ${CPPFLAGS}"
dnl    CFLAGS="-I${ac_default_prefix}/include ${CFLAGS}"
dnl    ac_configure_args="$ac_configure_args --includedir=${ac_default_prefix}/include"
  fi
else
  CPPFLAGS="-I${includedir} ${CPPFLAGS}"
  CFLAGS="-I${includedir} ${CFLAGS}"
fi
echo "==>${CFLAGS}"
echo "==>${CPPFLAGS}"

dnl pass default prefix on to subdirs, if not explicitely given as an option
if test "x$prefix" = xNONE; then
  ac_configure_args="$ac_configure_args --prefix=$ac_default_prefix"
fi
echo "===========>$oldincludedir"

dnl we prefer using gcc for compiling C++ files, provided the user did
dnl not overwrite it explicitely
if test "${GXX}" = "yes" && test "${ac_cxx_set}" = no; then
  CXX=gcc
fi  

dnl lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll
dnl check for various libraries and headers
dnl
dnl Checks for libraries.
dnl AC_CHECK_LIB(BSD, atof)
dnl AC_CHECK_LIB(bsd, atof)
AC_CHECK_LIB(socket, socket)
AC_CHECK_LIB(nsl, inet_ntoa)

if test "$ac_cv_enable_code_dbm" != "no"; then
   AC_CHECK_FUNC(dbminit,ac_cv_lib_dbm="yes",[
      AC_CHECK_LIB(dbm, dbminit)
      if test "$ac_cv_lib_dbm_dbminit" = "no"; then
	 AC_CHECK_LIB(gdbm, gdbm_open)
         if test "$ac_cv_lib_gdbm_gdbm_open" = "no"; then
            AC_CHECK_LIB(ndbm, dbm_open)
            if test "$ac_cv_lib_ndbm_gdbm_open" = "no"; then
               AC_CHECK_LIB(dbm, dbminit)
            fi
         fi
      else
	 AC_CHECK_LIB(dbm, gdbm_open)
         if test "$ac_cv_lib_dbm_gdbm_open" = "yes"; then
	   AC_DEFINE(HAVE_LIBGDBM)
	   AC_MSG_WARN(*** your libdbm is linked to libgdbm!)
         fi
      fi
      if test "$ac_cv_lib_gdbm_gdbm_open" = "yes" || 
	   test "$ac_cv_lib_ndbm_dbm_open" = "yes" ||
	   test "$ac_cv_lib_dbm_dbminit" = "yes" ||
	   test "$ac_cv_lib_dbm_dbm_open" = "yes"; then
         ac_cv_lib_dbm="yes"
      else
         ac_cv_lib_dbm="no"
      fi])
fi

dnl checking for libwrap
if test "$ac_cv_enable_code_wrap" != "no"; then
   AC_CHECK_LIB(wrap, eval_client)
   if test "$ac_cv_lib_wrap_eval_client" = "yes"; then
      AC_CHECK_HEADER(tcpd.h,echo TCPD yes,[
        CPPFLAGS=$CPPFLAGS" -I/usr/local/include"
        unset ac_cv_header_tcpd_h
        AC_CHECK_HEADER(tcpd.h,CFLAGS=$CFLAGS" -I/usr/local/include",
          ac_cv_enable_code_wrap="no")
      ])
   fi
fi

AC_HEADER_STDC
AC_CHECK_HEADER(fcntl.h,[
ac_cv_header_fcntl_h="yes"
AC_DEFINE_UNQUOTED(HAVE_FCNTL_H, 1)])
if test "$enable_lock_files" != "yes" && test "$ac_cv_header_fcntl_h" = "yes"; then
   AC_CHECK_FUNC(flock,ac_cv_flock="yes",[
])
   if test "$ac_cv_flock" = "yes"; then
      AC_DEFINE_UNQUOTED(HAVE_FLOCK, 1)
   else
      AC_MSG_CHECKING(whether have F_SETLK)
      AC_CACHE_VAL(ac_cv_have_F_SETLK, AC_TRY_RUN( 
       [#include <fcntl.h>
        main() { 
#		ifdef F_SETLK
			exit(0);
#		else
			exit(1);
#		endif
 }],
        ac_cv_have_F_SETLK=yes,
        ac_cv_have_F_SETLK=no,
        ac_cv_have_F_SETLK=no))
      if test "$ac_cv_have_F_SETLK" = "yes"; then
         AC_MSG_RESULT(yes)
         AC_DEFINE_UNQUOTED(HAVE_F_SETLK, 1)
      else
         AC_MSG_RESULT(no)
         AC_MSG_CHECKING(for lock-style)
         AC_DEFINE_UNQUOTED(HAVE_LOCK_FILES, 1)
         AC_MSG_RESULT(lockfiles)
      fi
   fi
else
   AC_MSG_CHECKING(for lock-style)
   AC_DEFINE_UNQUOTED(HAVE_LOCK_FILES, 1)
   AC_MSG_RESULT(lockfiles)
fi

dnl AC_CHECK_LIB(inet, atof)
dnl AC_CHECK_LIB(X11, atof)
dnl AC_CHECK_LIB(seq, atof)
dnl AC_CHECK_LIB(ndir, atof)
dnl AC_CHECK_LIB(, atof)
dnl AC_CHECK_LIB(, atof)
dnl AC_CHECK_LIB(, atof)

dnl Checks for header files.
AC_HEADER_DIRENT
AC_HEADER_SYS_WAIT
AC_HEADER_TIME
AC_STRUCT_TM
AC_STRUCT_TIMEZONE

AC_CHECK_HEADERS(arpa/nameser.h lastlog.h libio.h malloc.h memory.h)
AC_CHECK_HEADERS(netdb.h netinet/in.h resolv.h termio.h)
AC_CHECK_HEADER(sgtty.h,ac_cv_header_sgtty_h="yes")
AC_CHECK_HEADERS(string.h strings.h syslog.h)
AC_CHECK_HEADERS(sys/file.h sys/ioctl.h sys/socket.h sys/time.h sys/termio.h)
AC_CHECK_HEADERS(sys/termios.h sys/unistd.h)
AC_CHECK_HEADERS(unistd.h utmp.h varargs.h)
if test "$ac_cv_header_varargs_h" != "yes"; then
    AC_MSG_WARN(you don't have varargs.h)
    AC_MSG_WARN(          lib/util/multcat.c will not compile)
    AC_MSG_WARN(          lib/util/multcpy.c will not compile)
fi

AC_CHECK_FUNCS(bcopy dup2 fcntl ftime getcwd getdtablesize gethostname)
AC_CHECK_FUNCS(gettimeofday getwd index initgroups killpg memcpy)
AC_CHECK_FUNCS(mkdir res_mkquery)
AC_CHECK_FUNCS(setpgrp setreuid sigchild sigset sigsetmask socket)
AC_CHECK_FUNCS(strchr strdup truncate)

AC_FUNC_UTIME_NULL
AC_FUNC_VFORK
AC_FUNC_WAIT3

dnl Checks for typedefs, structures, and compiler characteristics.
AC_TYPE_OFF_T
AC_TYPE_SIGNAL
AC_DECL_SYS_SIGLIST

dnl Checks for library functions.
AC_PROG_GCC_TRADITIONAL
AC_C_CONST

AC_MSG_CHECKING(whether using nameservercode)
if test "$enable_nameserver" != no; then
  if test "$ac_cv_func_res_mkquery" = "yes"; then
    AC_MSG_RESULT(yes)
  else
    AC_CHECK_LIB(resolv, dn_expand)
  fi
else
    AC_MSG_WARN(no)
fi

dnl lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll
dnl sprintf returns number of printed chars
AC_MSG_CHECKING(whether vsprintf returns number of printed chars)
AC_CACHE_VAL(ac_cv_returns_n_of_chars, AC_TRY_RUN( 
 [#include <stdio.h> 
 main() { char *str=(char*)malloc(20);
 if (((int) sprintf(str,"123456789")) == 9) exit(0); else exit(1); }],
   ac_cv_returns_n_of_chars=yes,
   ac_cv_returns_n_of_chars=no,
   ac_cv_returns_n_of_chars=no))
if test "$ac_cv_returns_n_of_chars" = yes; then
  AC_MSG_RESULT(yes)
else
  AC_MSG_RESULT(no)
  AC_DEFINE(BSD_SPRINTF)
fi

dnl check if we have SIGSYS
AC_MSG_CHECKING(whether have SIGSYS)
AC_CACHE_VAL(ac_cv_have_SIGSYS, AC_TRY_RUN( 
 [#include <signal.h> 
 main() { if(SIGSYS>0) exit(0); else exit(1);}],
   ac_cv_have_SIGSYS=yes,
   ac_cv_have_SIGSYS=no,
   ac_cv_have_SIGSYS=no))
if test "$ac_cv_have_SIGSYS" = yes; then
  AC_MSG_RESULT(yes)
  AC_DEFINE(HAVE_DEF_SIGSYS)
else
  AC_MSG_RESULT(no)
fi

dnl check if we have struct state
AC_MSG_CHECKING(whether sys_errlist is declared)
AC_CACHE_VAL(ac_cv_have_SYS_ERRLIST, AC_TRY_RUN( 
 [#include <stdio.h>
 main() { extern int sys_errlist; exit(0); }],
   ac_cv_have_SYS_ERRLIST=yes,
   ac_cv_have_SYS_ERRLIST=no,
   ac_cv_have_SYS_ERRLIST=no))
if test "$ac_cv_have_SYS_ERRLIST" = "yes"; then
  AC_MSG_RESULT(no)
else
  AC_MSG_RESULT(yes)
  AC_DEFINE(HAVE_SYS_ERRLIST_DECL)
fi

dnl check if we have struct state
AC_MSG_CHECKING(whether have struct __res_state)
AC_CACHE_VAL(ac_cv_have_STATE, AC_TRY_RUN( 
 [
#ifdef HAVE_NETINET_IN_H
#  include <netinet/in.h>
#endif
#ifdef HAVE_NETDB_H
#  include <netdb.h>
#endif
#ifdef HAVE_SYS_SOCKET_H
#  include <sys/socket.h>
#endif
#ifdef HAVE_ARPA_NAMESER_H
#  include <arpa/nameser.h>
#endif
#ifdef HAVE_RESOLV_H
#  include <resolv.h> 
#endif
 main() { struct __res_state res; exit(0); }],
   ac_cv_have_STATE=yes,
   ac_cv_have_STATE=no,
   ac_cv_have_STATE=no))
if test "$ac_cv_have_STATE" = "yes"; then
  AC_MSG_RESULT(yes)
  AC_DEFINE(HAVE_RES_STATE)
else
  AC_MSG_RESULT(no)
fi

dnl check if we have _NFILE
AC_MSG_CHECKING(whether have _NFILE)
AC_CACHE_VAL(ac_cv_have_NFILE, AC_TRY_RUN( 
 [#include <stdio.h>
 main() { 
#ifdef _NFILE
exit(0);
#else
exit(1);
#endif
 }],
   ac_cv_have_NFILE=yes,
   ac_cv_have_NFILE=no,
   ac_cv_have_NFILE=no))
if test "$ac_cv_have_NFILE" = yes; then
  AC_MSG_RESULT(yes)
  AC_DEFINE(HAVE_NFILE)
else
  AC_MSG_RESULT(no)
fi

dnl check arguments of mkdir()
if test "$ac_cv_func_mkdir" = "yes"; then
  AC_MSG_CHECKING(what argument mkdir() takes a second argument)
  AC_CACHE_VAL(ac_cv_have_MKDIR_LNX, AC_TRY_RUN( 
   [#include <sys/stat.h>
     main() { 
	mkdir("dummy", 777);
	exit(0);
   }],
     ac_cv_have_MKDIR_LNX=yes,
     ac_cv_have_MKDIR_LNX=no,
     ac_cv_have_MKDIR_LNX=no))
  if test "$ac_cv_have_MKDIR_LNX" = yes; then
    AC_MSG_RESULT(yes)
    AC_DEFINE(MKDIR_HAVE_SECOND_ARG)
  else
    AC_MSG_RESULT(no)
  fi
  rmdir dummy
fi

dnl check whether fcntl(2, F_DUPFD, fd); works
if test "$ac_cv_header_fcntl_h" = "yes"; then
  AC_MSG_CHECKING(whether fcntl(2, F_DUPFD, fd) works)
  AC_CACHE_VAL(ac_cv_have_FCNTL_F_DUPFD, AC_TRY_RUN( 
   [#include <fcntl.h>
     main() { 
	int fd, fd2;
  	fd2 = fcntl(2, F_DUPFD, fd);
	if(fd2>0) exit(0); else exit(1);
   }],
     ac_cv_have_FCNTL_F_DUPFD=yes,
     ac_cv_have_FCNTL_F_DUPFD=no,
     ac_cv_have_FCNTL_F_DUPFD=no))
  if test "$ac_cv_have_FCNTL_F_DUPFD" = yes; then
    AC_MSG_RESULT(yes)
    AC_DEFINE(HAVE_FCNTL_F_DUPFD)
  else
    AC_MSG_RESULT(no)
  fi
fi

dnl check arguments of ioctl(1, TIOCSBRK, 0)
if test "$ac_cv_header_sys_ioctl_h" = "yes"; then
  AC_MSG_CHECKING(whether ioctl(1, TIOCSBRK, 0) works)
  AC_CACHE_VAL(ac_cv_have_TIOCSBRK, AC_TRY_RUN( 
   [#include <sys/ioctl.h>
     main() { 
	ioctl(1, TIOCSBRK, 0)
	exit(0);
   }],
     ac_cv_have_TIOCSBRK=yes,
     ac_cv_have_TIOCSBRK=no,
     ac_cv_have_TIOCSBRK=no))
  if test "$ac_cv_have_TIOCSBRK" = yes; then
    AC_MSG_RESULT(yes)
    AC_DEFINE(HAVE_IOCTL_TIOCSBRK)
  else
    AC_MSG_RESULT(no)
  fi
  ac_cv_header_sys_ioctl_h=$ac_cv_have_TIOCSBRK
fi

dnl check some defines on HP machine
if test "$ac_cv_header_sgtty_h" = "yes"; then
  AC_MSG_CHECKING(whether CBREAK is defined in <sgtty.h>)
  AC_CACHE_VAL(ac_cv_have_CBREAK, AC_TRY_RUN( 
   [#include <sgtty.h>
     main() { 
#ifdef CBREAK
	exit(0);
#else
	exit(1);
#endif
   }],
     ac_cv_have_CBREAK=yes,
     ac_cv_have_CBREAK=no,
     ac_cv_have_CBREAK=no))
  if test "$ac_cv_have_CBREAK" = yes; then
    AC_MSG_RESULT(yes)
    AC_DEFINE(HAVE_SGTTY_CBREAK)
    AC_DEFINE(HAVE_SGTTY_H)
  else
    AC_MSG_RESULT(no)
  fi
  AC_MSG_CHECKING(whether TIOCSETN is defined in <sgtty.h>)
  AC_CACHE_VAL(ac_cv_have_TIOCSETN, AC_TRY_RUN( 
   [#include <sgtty.h>
     main() { 
#ifdef TIOCSETN
	exit(0);
#else
	exit(1);
#endif
   }],
     ac_cv_have_TIOCSETN=yes,
     ac_cv_have_TIOCSETN=no,
     ac_cv_have_TIOCSETN=no))
  if test "$ac_cv_have_TIOCSETN" = yes; then
    AC_MSG_RESULT(yes)
    AC_DEFINE(HAVE_SGTTY_TIOCSETN)
    AC_DEFINE(HAVE_SGTTY_H)
  else
    AC_MSG_RESULT(no)
    AC_CHECK_HEADERS(sys/strtio.h)
    if test "$ac_cv_header_sys_strtio_h" = "yes"; then
      AC_MSG_CHECKING(whether TIOCSETN is defined in <sys/strtio.h>)
      AC_TRY_RUN([#include <sgtty.h>
#include <sys/strtio.h>
       main() { 
#ifdef TIOCSETN
	  exit(0);
#else
	  exit(1);
#endif
       }],
       ac_cv_have_TIOCSETN=yes,
       ac_cv_have_TIOCSETN=no,
       ac_cv_have_TIOCSETN=no)
      if test "$ac_cv_have_TIOCSETN" = yes; then
        AC_MSG_RESULT(yes)
        AC_DEFINE(HAVE_SGTTY_TIOCSETN)
       AC_DEFINE(HAVE_SGTTY_H)
      else
        AC_MSG_RESULT(no)
      fi
    else
      if test "$ac_cv_header_termio_h" = "yes"; then
        AC_MSG_CHECKING(whether TIOCSETN is defined in <termio.h>)
        AC_TRY_RUN([#include <termio.h>
          main() { 
#ifdef TIOCSETN
    		exit(0);
#else
		exit(1);
#endif
        }],
          ac_cv_have_TERMIO_TIOCSETN=yes,
          ac_cv_have_TERMIO_TIOCSETN=no,
          ac_cv_have_TERMIO_TIOCSETN=no)
        if test "$ac_cv_have_TERMIO_TIOCSETN" = yes; then
          AC_MSG_RESULT(yes)
          ac_cv_header_sgtty_h="no"
          AC_DEFINE(HAVE_TERMIO_TIOCSETN)
        else
          AC_MSG_RESULT(no)
	fi
      fi
    fi
  fi
fi

dnl check if compiler supports variable number of arguments 
if test "$ac_cv_header_varargs_h" != "yes"; then
  AC_MSG_CHECKING(if compiler supports variable number of arguments)
dnl  AC_TRY_RUN( 
  AC_CACHE_VAL(ac_cv_VAR_NBR_ARGS, AC_TRY_RUN( 
   [ int var_t1(a)
	char *a;
	{
	  return(var_t2(&a));
	}

	int var_t2(argv)
	char **argv;
	{
	  if((strcmp(argv[0],argv[1])!=0)&&(strcmp(argv[0],argv[2])==0))
		return(0);
	  else return(1);
	}
	main()
	{
 	 exit(var_t1("abs", "qwe", "abs"));
   }],
     ac_cv_VAR_NBR_ARGS=yes,
     ac_cv_VAR_NBR_ARGS=no,
     ac_cv_VAR_NBR_ARGS=no))
  if test "$ac_cv_VAR_NBR_ARGS" = "yes"; then
    AC_MSG_RESULT(yes)
  else
    AC_MSG_RESULT(no)
    AC_DEFINE(NO_VARARGS)
  fi
fi

dnl check if we have struct state
AC_MSG_CHECKING(whether have union wait)
AC_CACHE_VAL(ac_cv_have_UNION_WAIT, AC_TRY_RUN( 
 [#include <sys/wait.h>
 main() { 
	union wait pstatus;
	exit(0); }],
   ac_cv_have_UNION_WAIT=yes,
   ac_cv_have_UNION_WAIT=no,
   ac_cv_have_UNION_WAIT=no))
if test "$ac_cv_have_UNION_WAIT" = "yes"; then
  AC_MSG_RESULT(yes)
  AC_DEFINE(HAVE_UNION_WAIT)
else
  AC_MSG_RESULT(no)
fi

echo
if test "$host_os" = "linux"; then
  AC_DEFINE_UNQUOTED(LINUX,1)
fi
dnl lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll
dnl lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll
AC_SET_DEFINE(DEBUG, $mmdfdebug)
AC_SET_DEFINE(D_LOG, $mmdfdlog)
AC_SET_DEFINE(D_DBGLOG, $mmdfdbglog)
AC_SET_DEFINE(NODOMLIT, $mmdfnodomlit)
AC_SET_DEFINE(LEFTDOTS, $mmdfleftdots)
AC_SET_DEFINE(STATSORT, $mmdfstatsort)
AC_SET_DEFINE(CITATION, $mmdfcitation)

AC_ENABLE_DEFAULT_CODE(wrap, yes, lib, "tcp wrapper")
AC_ENABLE_DEFAULT_CODE(nameserver, yes, code, "nameserver")
AC_ENABLE_DEFAULT_CODE(dbm, yes, lib, "dbm")
AC_ENABLE_DEFAULT_CODE(nis, no , code, "tables can come via NIS")
AC_ENABLE_DEFAULT_CODE(nn,  no , code,
	"'mailids' and 'users' configurable in mmdftailor")
AC_ENABLE_DEFAULT_CODE(nosrcroute,  yes, code, "Source routing")
AC_ENABLE_DEFAULT_CODE(8bit,        yes, code, "8bit-clean transfer")

if test "$ac_cv_enable_lib_dbm" = "yes"; then
   CH_TB="ch_tbdbm"
else
   CH_TB="ch_tbseq"
fi
if test "$enable_8bit" = "yes"; then
   AC_DEFINE(EIGHT_BIT_CLEAN)
fi
dnl if test "$enable_nodomlit" = "yes"; then
dnl    ac_cv_enable_nodomlit=$enable_nodomlit
dnl    AC_DEFINE(NODOMLIT)
dnl fi
dnl if test "$enable_leftdots" = "yes"; then
dnl    ac_cv_enable_leftdot=$enable_leftdot
dnl    AC_DEFINE(LEFTDOTS)
dnl fi
dnl if test "$enable_statsort" = "yes"; then
dnl    ac_cv_enable_statsort=$enable_statsort
dnl    AC_DEFINE(STATSORT)
dnl fi
dnl AC_CHECK_DEFINE($enable_nodomlit, NODOMLIT)
dnl AC_CHECK_DEFINE($enable_leftdots, LEFTDOTS)
dnl AC_CHECK_DEFINE($enable_statsort, STATSORT)

dnl if test "$ac_cv_lib_gdbm_gdbm_open" = "yes" || \
dnl 	test "$ac_cv_lib_ndbm" = "yes" || \
dnl 	test "$ac_cv_lib_dbm" = "yes"; then
dnl    CH_TB="ch_tbdbm"
dnl else
dnl    CH_TB="ch_tbseq"
dnl fi

dnl lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll
echo
if test -d lib; then
  SUBDIRS="$SUBDIRS lib"
fi
if test -d src; then
  SUBDIRS="$SUBDIRS src"
fi
if test -d uip; then
  SUBDIRS="$SUBDIRS uip"
fi
LIBSUBDIRS="addr mmdf table util"
AC_ENABLE_DEFAULT(dial, no, LIBSUBDIRS)

SRCSUBDIRS="deliver local submit tools"
AC_ENABLE_DEFAULT(badusers, yes, SRCSUBDIRS)
AC_ENABLE_DEFAULT(bboards,  no,  SRCSUBDIRS)
AC_ENABLE_DEFAULT(blockaddr,yes, SRCSUBDIRS)
AC_ENABLE_DEFAULT(delay,    yes, SRCSUBDIRS)
AC_ENABLE_DEFAULT(ean,      no,  SRCSUBDIRS)
AC_ENABLE_DEFAULT(list,     yes, SRCSUBDIRS)
AC_ENABLE_DEFAULT(niftp,    no,  SRCSUBDIRS)
AC_ENABLE_DEFAULT(phone,    no , SRCSUBDIRS)
AC_ENABLE_DEFAULT(pobox,    yes, SRCSUBDIRS)
AC_ENABLE_DEFAULT(pop,      no , SRCSUBDIRS)
AC_ENABLE_DEFAULT(prog,     yes, SRCSUBDIRS)
AC_ENABLE_DEFAULT(smphone,  no , SRCSUBDIRS)
AC_ENABLE_DEFAULT(smtp,     yes, SRCSUBDIRS)
AC_ENABLE_DEFAULT(uucp,     yes, SRCSUBDIRS)

if test "$enable_phone" = "yes" && test "$enable_dial" = "no"; then
    AC_MSG_WARN(need lib/dial for phone-channel...enabled)
    enable_dial="yes"
    ac_cv_enable_dial="yes"
    LIBSUBDIRS=$LIBSUBDIRS" dial"
fi
if test "$enable_smphone" = "yes" && test "$enable_dial" = "no"; then
    AC_MSG_WARN(need lib/dial for smphone-channel...enabled)
    enable_dial="yes"
    ac_cv_enable_dial="yes"
    LIBSUBDIRS=$LIBSUBDIRS" dial"
fi
if test "$enable_dial" = "yes"; then
  AC_DEFINE(HAVE_DIAL)
fi

dnl AC_ENABLE_DEFAULT(bboards,  yes,  SRCSUBDIRS)
dnl AC_ENABLE_DEFAULT(ean,      yes,  SRCSUBDIRS) xean2mmdf ok, xean (src/ean missing)
dnl AC_ENABLE_DEFAULT(niftp,    yes,  SRCSUBDIRS) _NFILE
dnl AC_ENABLE_DEFAULT(phone,    yes,  SRCSUBDIRS) ok
dnl AC_ENABLE_DEFAULT(pop,      yes,  SRCSUBDIRS)
dnl AC_ENABLE_DEFAULT(smphone,  yes,  SRCSUBDIRS) ok

UIPSUBDIRS=""
AC_ENABLE_DEFAULT(msg,         yes, UIPSUBDIRS)
AC_ENABLE_DEFAULT(other,       yes, UIPSUBDIRS)
AC_ENABLE_DEFAULT(send,        yes, UIPSUBDIRS)
AC_ENABLE_DEFAULT(snd,         yes, UIPSUBDIRS)
AC_ENABLE_DEFAULT(ucbmail,     no,  UIPSUBDIRS)
AC_ENABLE_DEFAULT(unsupported, no,  UIPSUBDIRS)

dnl lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll
CFLAGS="-I\${top_srcdir}/h $CFLAGS"
if test "$ac_cv_prog_gcc" = "yes"; then
  CFLAGS="$CFLAGS -pipe"
fi

dnl lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll
if test "x$prefix" = "xNONE"; then
   prefix=$ac_default_prefix
fi
dnl mmdfprefix="\${prefix}/mmdf"
mmdflibdir="\${mmdfprefix}/lib"
chandir="\${mmdfprefix}/chans"
tbldir="\${mmdfprefix}/table"
if test "x$exec_prefix" = "xNONE"; then
   exec_prefix="\${prefix}/local"
fi
if test "$bindir" = "\${exec_prefix}/bin"; then
   bindir="\${exec_prefix}/bin"
fi
if test "$sbindir" = "\${exec_prefix}/sbin"; then
   sbindir="\${exec_prefix}/sbin"
fi
if test "$libexecdir" = "\${exec_prefix}/libexec"; then
   libexecdir="\${exec_prefix}/lib/mh"
fi
if test "$datadir" = "\${prefix}/share"; then
   datadir="\${mmdfprefix}/table"
fi
if test "$sharedstatedir" != "\${prefix}/com"; then
   dnl sharedstatedir="\${prefix}/spool/mmdf/home"
   echo "used old syntax --sharedstatedir="
   if test "$used_mmdfspooldir" = 0; then
      mmdfspooldir=$sharedstatedir
   else
      AC_MSG_WARN("Ignoring option 'sharedstatedir='")
   fi
fi
if test "$localstatedir" != "\${prefix}/var"; then
   dnl localstatedir="\${prefix}/spool/mmdf/log"
   echo "used old syntax --localstatedir="
   if test "$used_mmdflogdir" = 0 && test "$used_mmdfphasedir" = 0 && \
	test "$used_mmdfdiallog" = 0 ; then
      mmdflogdir=$localstatedir
      mmdfphasedir=$localstatedir/phase
      mmdfdiallog=$localstatedir/dial_log
   else
      AC_MSG_WARN("Ignoring option 'localstatedir'")
   fi
fi
if test "$sysconfdir" = "\${prefix}/etc"; then
   sysconfdir="\${mmdfprefix}"
fi

AC_SUBST(SUBDIRS)
AC_SUBST(LIBSUBDIRS)
AC_SUBST(SRCSUBDIRS)
AC_SUBST(UIPSUBDIRS)

AC_SUBST(WHAT_DEPEND)
AC_SUBST(DEPEND_FLAG)
AC_SUBST(MMDF_MAJOR_VERSION)
AC_SUBST(MMDF_MINOR_VERSION)
AC_SUBST(MMDF_PATCH_LEVEL)
AC_SUBST(VERSION_DATE)
AC_SUBST(MMDFLOGIN)
AC_SUBST(ROOTLOGIN)
AC_SUBST(PGMPROT)
AC_SUBST(MMDFLIBS)
AC_SUBST(CXXTEMPLFLAGS)
AC_SUBST(STATIC_LDFLAGS)
AC_SUBST(CH_TB)
AC_SUBST(LIBFIX)
AC_SUBST(UNAME_MACHINE)
AC_SUBST(UNAME_RELEASE)
AC_SUBST(UNAME_SYSTEM)
AC_SUBST(UNAME_VERSION)
AC_SUBST(UNAME_NODE)
AC_SUBST(mmdflibdir)
AC_SUBST(chandir)
AC_SUBST(tbldir)
AC_SUBST(rcvdir)
dnl AC_SUBST(mmdf_prefix)

echo "host  ="$host
echo "cpu   ="$host_cpu
echo "vendor="$host_vendor
echo "os    ="$host_os
echo "target="$target


cp confdefs.h Xconfdefs.h
OUTPUT_FILES=$OUTPUT_FILES" "$OUTPUT_C_FILES
AC_OUTPUT(${OUTPUT_FILES})
if test "$MMDF_TARGET" = "yes"; then
   cd conf
   echo running ./sitesetup $target
   ./sitesetup $target
   cd ..
else
   echo "No target found. Cannot run ./sitesetup <target>"
   echo "Please do it by hand."
fi

rm -f Makefile.com
ln -s conf/common/Makefile.com Makefile.com

echo "==============================================================="
echo "
MMDF version                   : $MMDF_MAJOR_VERSION.$MMDF_MINOR_VERSION
   Patchlevel                  : $MMDF_PATCH_LEVEL
   Date                        : $VERSION_DATE
compiler                       : ${CC}
compiler flags                 : ${CFLAGS}
linker flags                   : ${LDFLAGS}
source code location           : ${srcdir}

   Here are your pathname-settings:
prefix                         = $prefix
exec_prefix                    = $exec_prefix
varprefix                      = $varprefix
bindir                         = $bindir
sbindir                        = $sbindir
libexecdir                     = $libexecdir

mmdfprefix                     = $mmdfprefix
mmdflibdir                     = $mmdflibdir
chandir                        = $chandir
tbldir                         = $tbldir
datadir                        = $datadir
configdir                      = $sysconfdir

mmdfspooldir                   = $mmdfspooldir
mmdfphosedir                   = $mmdfphasedir
mmdflogdir                     = $mmdflogdir
mmdfdiallog                    = $mmdfdiallog"
dnl echo "sharedstatedir= $sharedstatedir"
dnl echo "localstatedir = $localstatedir"
